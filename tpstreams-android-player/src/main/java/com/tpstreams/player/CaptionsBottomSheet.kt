package com.tpstreams.player

import android.app.Dialog
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import androidx.fragment.app.FragmentManager
import com.google.android.material.bottomsheet.BottomSheetBehavior
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.google.android.material.bottomsheet.BottomSheetDialogFragment
import android.util.Log
import java.util.Locale

class CaptionsBottomSheet : BottomSheetDialogFragment() {
    
    private var captionsListener: CaptionsOptionsListener? = null
    private var availableCaptions: List<Pair<String, String>> = emptyList()
    private var currentLanguage: String? = null
    private val optionViewMap = mutableMapOf<String?, View>()

    interface CaptionsOptionsListener {
        fun onCaptionsDisabled()
        fun onCaptionLanguageSelected(language: String)
        fun getCurrentCaptionLanguage(): String?
        fun getPlayer(): TPStreamsPlayer?
    }

    fun setCaptionsOptionsListener(listener: CaptionsOptionsListener) {
        captionsListener = listener
    }
    
    fun setAvailableCaptions(captions: List<Pair<String, String>>) {
        availableCaptions = captions
    }
    
    fun setCurrentLanguage(language: String?) {
        currentLanguage = language
    }

    override fun getTheme(): Int = R.style.BottomSheetDialogTheme

    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
        val dialog = super.onCreateDialog(savedInstanceState) as BottomSheetDialog
        
        dialog.setOnShowListener { dialogInterface ->
            val bottomSheetDialog = dialogInterface as BottomSheetDialog
            val bottomSheet = bottomSheetDialog.findViewById<FrameLayout>(com.google.android.material.R.id.design_bottom_sheet)
            
            bottomSheet?.let {
                val behavior = BottomSheetBehavior.from(it)
                behavior.skipCollapsed = true
                behavior.state = BottomSheetBehavior.STATE_EXPANDED
            }
        }
        
        return dialog
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.bottom_sheet_captions_options, container, false)
    }
    
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        val titleView = view.findViewById<TextView>(R.id.captions_title)
        titleView.text = "Captions"
        
        val container = view.findViewById<LinearLayout>(R.id.captions_container)
        container.removeAllViews()
        optionViewMap.clear()
        
        addCaptionOption(container, null, "Off", "")
        
        val tpPlayer = captionsListener?.getPlayer()
        
        for ((language, label) in availableCaptions) {
            val isAutoGenerated = tpPlayer?.isSubtitleAutoGenerated(language) ?: false
            val description = if (isAutoGenerated) "Auto-generated" else ""
            
            addCaptionOption(container, language, label, description)
        }
        
        updateSelectedIndicator()
    }
    
    private fun addCaptionOption(container: LinearLayout, language: String?, label: String, description: String) {
        val inflater = LayoutInflater.from(context)
        val optionView = inflater.inflate(R.layout.item_caption_option, container, false)
        
        val titleText = optionView.findViewById<TextView>(R.id.caption_option_title)
        if (language != null) {
            titleText.text = getLanguageName(language)
        } else {
            titleText.text = "Off"
        }
        
        val descText = optionView.findViewById<TextView>(R.id.caption_option_description)
        if (description.isNotEmpty()) {
            descText.text = description
            descText.visibility = View.VISIBLE
        } else {
            descText.visibility = View.GONE
        }
        
        val checkIndicator = optionView.findViewById<ImageView>(R.id.caption_selected_indicator)
        
        optionView.setOnClickListener {
            if (language == null) {
                captionsListener?.onCaptionsDisabled()
            } else {
                captionsListener?.onCaptionLanguageSelected(language)
            }
            dismiss()
        }
        
        container.addView(optionView)
        optionViewMap[language] = optionView
    }
    
    /**
     * Convert ISO language code to full language name using Java Locale
     */
    private fun getLanguageName(languageCode: String): String {
        try {
            val locale = Locale(languageCode)
            val displayLanguage = locale.getDisplayLanguage(Locale.ENGLISH)
            
            if (displayLanguage.equals(languageCode, ignoreCase = true) || displayLanguage.isEmpty()) {
                return languageCode.replaceFirstChar { it.uppercase() }
            }
            
            return displayLanguage
        } catch (e: Exception) {
            Log.e(TAG, "Error getting language name for $languageCode", e)
            return languageCode.replaceFirstChar { it.uppercase() }
        }
    }
    
    private fun updateSelectedIndicator() {
        for ((_, view) in optionViewMap) {
            view.findViewById<ImageView>(R.id.caption_selected_indicator).visibility = View.GONE
        }
        
        optionViewMap[currentLanguage]?.findViewById<ImageView>(R.id.caption_selected_indicator)?.visibility = View.VISIBLE
    }

    fun show(fragmentManager: FragmentManager) {
        show(fragmentManager, TAG)
    }

    companion object {
        private const val TAG = "CaptionsOptionsBottomSheet"
    }
} 